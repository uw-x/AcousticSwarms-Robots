import struct

# CTRL_VALUES_MIC_STREAM_START = struct.pack('<B', 0xA5)
# CTRL_VALUES_MIC_STREAM_STOP = struct.pack('<B', 0xEF)

# # CTRL_VALUES_MIC_STREAM_START = chr(0x01).encode()
# # CTRL_VALUES_MIC_STREAM_STOP = chr(0x00).encode()

# CTRL_VALUES_TIMESYNC_SET_MASTER = struct.pack('<B', 0x6D)
# CTRL_VALUES_TIMESYNC_SET_SLAVE = struct.pack('<B', 0x73)

ASS_CONTROL_ENABLE_MASTER = 0x6D
ASS_CONTROL_ENABLE_SLAVE = 0x73
ASS_CONTROL_TS_DISABLE = 0x74
ASS_CONTROL_MIC_STREAM_STOP = 0xEF
ASS_CONTROL_STOP_CLICK = 0x10
ASS_CONTROL_START_CLICK = 0x11
ASS_CONTROL_MIC_UPDATE_PARAMS = 0x12
ASS_CONTROL_MIC_MODE_SET_STREAM = 0x13
ASS_CONTROL_MIC_MODE_SET_RECORD = 0x14
ASS_CONTROL_RECORDING_SEND = 0x15
ASS_STATUS_RECORDING_FINISHED = 0x01

DCS_COMMAND_PING = 0x79
DCS_COMMAND_SYNC_TASK_CREATE = 0x80
DCS_COMMAND_ROBOT_MOTION = 0x81
DCS_ROBOT_POSITION_UPDATE = 0x82
DCS_COMMAND_SYNC_TASK_CREATE_RECURRING = 0x83
DCS_COMMAND_XCORR_STREAM_ENABLE = 0x84
DCS_COMMAND_XCORR_STREAM_DISABLE = 0x85
DCS_COMMAND_ADD_MILESTONES = 0x86
DCS_COMMAND_NAV_BEGIN = 0x87
DCS_COMMAND_ENTER_BASE = 0x88
DCS_COMMAND_LOAD_PROFILE = 0x89
DCS_COMMAND_RESET_MILESTONES = 0x90

from enum import IntEnum

class TASK_PROFILE(IntEnum):
    TASK_PROFILE_LOCALIZATION = 0

class SYNC_TASKS(IntEnum):
    SYNC_TASK_MIC_START = 0
    SYNC_TASK_MIC_RECORD = 1
    SYNC_TASK_SPK_START = 2

SSS_READ_FUEL_GAUGE = 0xF3
SSS_IR_ENABLE_EDGE_DETECTION = 0xF4
SSS_IR_DISABLE_EDGE_DETECTION = 0xF5
SSS_IR_STATUS_READ = 0xF6
SSS_ENABLE_IR_STATUS_STREAM = 0xF7
SSS_DISABLE_IR_STATUS_STREAM = 0xF8
SSS_ENABLE_COLLISION_DETECTION = 0xF9
SSS_DISABLE_COLLISION_DETECTION = 0xFA
SSS_CALIBRATE_ALL = 0xFB
SSS_STREAM_ENABLE = 0xFC
SSS_STREAM_DISABLE = 0xFD
SSS_SENSOR_PARAMS_CONFIGURE = 0xFE